// Mocks generated by Mockito 5.3.0 from annotations
// in dolbyio_comms_sdk_flutter/test/service/dolbyio_comms_conference_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dolbyio_comms_sdk_flutter/src/sdk_api/models/participant.dart'
    as _i5;
import 'package:dolbyio_comms_sdk_flutter/src/sdk_api/models/participant_info.dart'
    as _i4;
import 'package:dolbyio_comms_sdk_flutter/src/sdk_api/session_service.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SessionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionService extends _i1.Mock implements _i2.SessionService {
  MockSessionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> open(_i4.ParticipantInfo? participantInfo) =>
      (super.noSuchMethod(Invocation.method(#open, [participantInfo]),
              returnValue: _i3.Future<void>.value(),
              returnValueForMissingStub: _i3.Future<void>.value())
          as _i3.Future<void>);
  @override
  _i3.Future<bool> isOpen() =>
      (super.noSuchMethod(Invocation.method(#isOpen, []),
          returnValue: _i3.Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<_i5.Participant?> getParticipant() =>
      (super.noSuchMethod(Invocation.method(#getParticipant, []),
              returnValue: _i3.Future<_i5.Participant?>.value())
          as _i3.Future<_i5.Participant?>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i3.Future<void>.value(),
      returnValueForMissingStub: _i3.Future<void>.value()) as _i3.Future<void>);
}
